#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ArduinoJson.h>
#include <math.h>
#include "secrets.h"

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//const char* ssid = "your_SSID";        // Replace with your WiFi SSID
//const char* password = "your_PASSWORD"; // Replace with your WiFi password

WiFiClient client;  // Create a WiFiClient object

// LED pin
const int ledPin = D3;  // Red LED connected to D3 or any other pins

// Cape Town coordinates
const float myLat = -33.9249;
const float myLon = 18.4241;

// Threshold distance for "close" (in km) this can be adjusted to your close proximity 
const float distanceThreshold = 1000.0;

void setup() {
  Serial.begin(115200); // I use low baud rates as my mini-pro freezes with higher rates.
  
  // Initialize LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Turn off LED initially
  
  // Initialize OLED display
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("ISS Tracker");
  display.display();
  delay(2000);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Get ISS position and check proximity
  getISSLocationAndCheckProximity();
}

void getISSLocationAndCheckProximity() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    // Fetch the ISS location
    http.begin(client, "http://api.open-notify.org/iss-now.json");
    int httpCode = http.GET();
    
    if (httpCode > 0) {
      String payload = http.getString();
      Serial.println("ISS Data: " + payload);

      // Parse JSON response
      StaticJsonDocument<512> doc;
      DeserializationError error = deserializeJson(doc, payload);
      
      if (!error) {
        float latitude = doc["iss_position"]["latitude"];
        float longitude = doc["iss_position"]["longitude"];
        
        // Calculate distance to ISS from your location
        float distance = calculateDistance(myLat, myLon, latitude, longitude);
        
        // Print data to Serial
        Serial.print("ISS Latitude: ");
        Serial.println(latitude);
        Serial.print("ISS Longitude: ");
        Serial.println(longitude);
        Serial.print("Distance: ");
        Serial.print(distance);
        Serial.println(" km");

        // Display ISS data on OLED
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("ISS Tracker");
        display.setCursor(0, 16);
        display.print("Lat: ");
        display.println(latitude, 4);
        display.setCursor(0, 32);
        display.print("Lon: ");
        display.println(longitude, 4);
        display.setCursor(0, 48);
        display.print("Dist: ");
        display.print(distance, 1);
        display.println(" km");
        display.display();

        // If ISS is within the threshold distance, turn on LED
        if (distance <= distanceThreshold) {
          digitalWrite(ledPin, HIGH); // Turn on the LED
        } else {
          digitalWrite(ledPin, LOW);  // Turn off the LED
        }
      } else {
        Serial.println("JSON Parsing failed");
      }
    }
    http.end(); // End the HTTP request
  }
}

// Function to calculate distance between two coordinates (in km) using Haversine formula
float calculateDistance(float lat1, float lon1, float lat2, float lon2) {
  const float R = 6371.0; // Radius of the Earth in km
  float dLat = radians(lat2 - lat1);
  float dLon = radians(lon2 - lon1);
  float a = sin(dLat / 2) * sin(dLat / 2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dLon / 2) * sin(dLon / 2);
  float c = 2 * atan2(sqrt(a), sqrt(1 - a));
  float distance = R * c; // Distance in km
  return distance;
}

void loop() {
  // Update ISS position every 10 seconds and check proximity
  delay(10000);
  getISSLocationAndCheckProximity();
}
